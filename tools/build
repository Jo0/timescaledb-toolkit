#!/bin/sh

set -ex

print() {
    printf '%s\n' "$*"
}

die() {
    st=${?:-0}
    if [ $st -eq 0 ]; then
        st=2
    fi
    print "$*" >&2
    exit $st
}

usage() {
    die 'build [ -n -pg1[234] ] ( test-crates | test-extension | test-post-install | test-doc | test-updates | clippy)'
}

require_pg_version() {
    [ -n "$pg_version" ] || die 'specify one of -pg12 | -pg13 | -pg14'
}

find_pg_config() {
    if [ -z "$pg_config" ]; then
        require_pg_version
        full_version=$(
            cd "$HOME/.pgx"
            set -- $pg_version.*/pgx-install
            [ "$1" = "$pg_version.*/pgx-install" ] && die "$pg_version not installed in $HOME/.pgx"
            set -- $(dirname $*)
            [ $# -eq 1 ] || die "too many installations for $pg_version, found: $*"
            echo $1)
        pg_config="$HOME/.pgx/$full_version/pgx-install/bin/pg_config"
    fi
    [ -x "$pg_config" ] || die "$pg_config not executable"
}

require_cargo_pgx() {
    [ -n "$cargo_pgx" ] || die 'specify path to cargo-pgx (0.4 series or newer)'
}

require_cargo_pgx_old() {
    [ -n "$cargo_pgx_old" ] || die 'specify path to cargo-pgx (0.2-0.3 series)'
}


[ $# -ge 1 ] || usage

while [ $# -gt 0 ]; do
    arg="$1"
    shift
    case "$arg" in
        -n)
            nop=:
            ;;

        -pgconfig)
            pg_config="$1"
            shift
            ;;

        -cargo-pgx)
            cargo_pgx="$1"
            shift
            ;;

        -cargo-pgx-old)
            cargo_pgx_old="$1"
            shift
            ;;

        -pgport)
            pg_port="$1"
            shift
            ;;

        -pg1[234])
            pg_version=${arg#-pg}
            pg=pg$pg_version
            [ -z "$pg_port" ] && pg_port=288$pg_version
            ;;

        clippy)
            $nop cargo fetch
            # We need to pick a postgres version to clippy the timescaledb_toolkit crate, but it doesn't matter which one.
            $nop cargo clippy --workspace --features 'pg14 pg_test' -- -D warnings
            ;;

        test-crates)
            # Should find no dependency crates to fetch.  If it finds any, we need to update the cache key.
            $nop cargo fetch
            $nop cargo test --workspace --exclude timescaledb_toolkit
            ;;

        test-extension)
            cd extension
            require_pg_version
            $nop cargo fetch
            $nop cargo test --features "$pg pg_test" --no-default-features
            ;;

        install)
            cd extension
            require_pg_version
            find_pg_config
            $nop cargo pgx install -c "$pg_config"
            ;;

        # Requires extension has been installed.  `install` or `test-extension` takes care of that.
        test-post-install)
            require_pg_version
            find_pg_config
            $nop cargo pgx stop $pg
            $nop cargo pgx start $pg
            $nop cargo run --manifest-path tools/post-install/Cargo.toml "$pg_config"
            $nop cargo run --manifest-path tools/testrunner/Cargo.toml -- -h localhost -p $pg_port
            ;;

        test-doc)
            require_pg_version
            $nop cargo run -p sql-doctester -- \
                 -h localhost \
                 -p $pg_port \
                 -s "CREATE EXTENSION timescaledb; CREATE EXTENSION timescaledb_toolkit; SET SESSION TIMEZONE TO 'UTC'" \
                 docs
            ;;

        test-updates)
            require_pg_version
            find_pg_config
            require_cargo_pgx
            require_cargo_pgx_old
            $nop cargo pgx start $pg
            $nop cargo run --manifest-path tools/update-tester/Cargo.toml -- full-update-test-source \
                 -h localhost \
                 -p $pg_port \
                 --cache old-versions \
                 . \
                 "$pg_config" \
                 "$cargo_pgx" \
                 "$cargo_pgx_old"
            ;;

        *)
            usage
            ;;
    esac
done
